Index: app/src/main/java/com/chrysanthemum/ui/dataView/task/AppointmentViewerTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.chrysanthemum.ui.dataView.task;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.graphics.Color;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.ShapeDrawable;\nimport android.graphics.drawable.shapes.RectShape;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport com.chrysanthemum.appdata.DataStorageModule;\nimport com.chrysanthemum.appdata.Util.AppUtil;\nimport com.chrysanthemum.appdata.dataType.Transaction;\nimport com.chrysanthemum.appdata.dataType.parsing.TimeParser;\nimport com.chrysanthemum.appdata.dataType.retreiver.DataRetriever;\nimport com.chrysanthemum.appdata.dataType.subType.AppointmentStatus;\nimport com.chrysanthemum.appdata.dataType.subType.Colour;\nimport com.chrysanthemum.appdata.querries.Query;\nimport com.chrysanthemum.appdata.querries.appointments.LoadAppointmentListByDayQuery;\nimport com.chrysanthemum.ui.dataView.display.DisplayBoard;\nimport com.chrysanthemum.ui.dataView.display.Displayable;\nimport com.chrysanthemum.ui.dataView.task.subTasks.AppointmentClaimTask;\nimport com.chrysanthemum.ui.dataView.task.subTasks.DaySelectorTask;\nimport com.chrysanthemum.ui.dataView.task.subTasks.NewAppointmentTask;\nimport com.chrysanthemum.ui.dataView.task.subTasks.UpdateAppointmentTask;\n\nimport java.time.LocalDate;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport androidx.annotation.Nullable;\n\npublic class AppointmentViewerTask extends Task {\n\n    private static final int SLOT_HEIGHT = 50;\n    private static final int MINUTE_WIDTH = 4;\n\n    private static final float TASK_SCALE = 1.2f;\n\n    private LinkedList<LinkedList<TransactionDisplay>> todayAppointments;\n    private String selectedDate;\n    private Map<Long, Transaction> appointmentList = new TreeMap<>();\n\n    public AppointmentViewerTask(TaskHostestActivity host) {\n        super(host);\n    }\n\n    @Override\n    public void start() {\n        host.setBarText(host.getMainTaskTitle());\n        selectedDate = TimeParser.parseDateDisplayDay(LocalDate.now());\n        setupDaySelectionForm();\n        loadAppointment();\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    private void setupDaySelectionForm() {\n        host.clearForm();\n\n        final TextView dateLabel = host.createFormLabel(1);\n        dateLabel.setText(\"Date:\");\n\n        final EditText dateForm = host.createEditableForm(1);\n        dateForm.setText(selectedDate);\n        dateForm.setFocusable(false);\n\n        dateForm.setOnClickListener(v -> setupDaySelectorTask());\n\n        Button button = host.getFormButton();\n        button.setVisibility(View.INVISIBLE);\n    }\n\n    private void setupDaySelectorTask(){\n        DaySelectorTask task = new DaySelectorTask(host, date -> {\n            selectedDate = TimeParser.parseDateDisplayDay(date);\n            setupDaySelectionForm();\n            loadAppointment();\n        });\n\n        task.start();\n    }\n\n    /**\n     * retrieve all appointments from database and request display update\n     */\n    private void loadAppointment(){\n\n        final String date = selectedDate.replaceAll(\"/\", \" \");\n\n        DataRetriever<LinkedList<Transaction>> retriever = data -> {\n\n            appointmentList = new TreeMap<>();\n\n            for(Transaction transaction : data){\n                appointmentList.put(transaction.getID(), transaction);\n            }\n            displayTransactions(date);\n        };\n\n        Query<LinkedList<Transaction>> query = new LoadAppointmentListByDayQuery(date, retriever);\n        query.executeQuery();\n    }\n\n    /**\n     * display transactions as stored in local memory\n     */\n    private void displayTransactions(String date) {\n        todayAppointments = new LinkedList<>();\n\n        DisplayBoard board = host.getBoard();\n        board.clear(host.getScale().scale(TASK_SCALE));\n\n        // add hour markers\n        for(int hour = 8; hour < 21; hour ++){\n            board.displayData(new HourMarker(hour, TimeParser.parseDate(date)));\n        }\n\n        for(long id : appointmentList.keySet()){\n            addTransactionToDisplay(appointmentList.get(id));\n        }\n    }\n\n    /**\n     * display one additional transaction\n     */\n    private void addTransactionToDisplay(Transaction transaction){\n        int rowNum = 0;\n\n        for(LinkedList<TransactionDisplay> row : todayAppointments){\n            Rect space = allocateSpace(rowNum, transaction);\n            boolean hasSpace = true;\n\n            for(TransactionDisplay d : row){\n                if(AppUtil.AABBCD(d.hitbox, space)){\n                    hasSpace = false;\n                    break;\n                }\n            }\n\n            if(hasSpace){\n                display(row, space, transaction);\n                return;\n            }\n\n            rowNum++;\n        }\n\n        LinkedList<TransactionDisplay> newRow = new LinkedList<>();\n        todayAppointments.add(newRow);\n\n        Rect space = allocateSpace(rowNum, transaction);\n        display(newRow, space, transaction);\n    }\n\n    private void display(LinkedList<TransactionDisplay> row, Rect space, Transaction transaction){\n        TransactionDisplay display = new TransactionDisplay(space, transaction);\n        row.add(display);\n        host.getBoard().displayData(display);\n    }\n\n    private Rect allocateSpace(int rowNum, Transaction transaction){\n        int left = getTimeXpos(transaction.getAppointmentTime());\n        int right = getTimeXpos(transaction.getAppointmentTime()\n                + transaction.getDuration());\n        int top = getRowYpos(rowNum + 1); // shift down by 1 row\n        int bottom = top + SLOT_HEIGHT;\n\n        return new Rect(left, top, right, bottom);\n    }\n\n\n    private static int getRowYpos(int row){\n        return row * (SLOT_HEIGHT + 2);\n    }\n\n    private static int getTimeXpos(int time){\n        return (time - (8 * 60)) * MINUTE_WIDTH;\n    }\n\n    private class TransactionDisplay extends Displayable {\n\n        private final Rect hitbox;\n        private final Transaction t;\n        private int colour;\n\n        public TransactionDisplay(Rect hitbox, Transaction t){\n            this.hitbox = hitbox;\n            this.t = t;\n        }\n\n        @Nullable\n        @Override\n        public Drawable getBGDrawable(Rect boundingBox) {\n\n            if(t.noShow()){\n                colour = 0xFF8C8C8C;\n            } else if (t.getTech() == null) {\n                colour = Color.LTGRAY;\n            } else {\n                colour = t.getTech().getColour();\n            }\n\n            ShapeDrawable drawable =  new ShapeDrawable(new RectShape());\n            drawable.getPaint().setColor(colour);\n            drawable.setBounds(boundingBox);\n            return drawable;\n        }\n\n        @Override\n        public Colour getBGColour() {\n            return new Colour(colour);\n        }\n\n        @Override\n        public String getDisplayData() {\n            return t.getAppointmentDisplayData();\n        }\n\n        @Override\n        public View.OnClickListener getOnclickListener() {\n            return v -> {\n                if(t.getAppointmentStatus() == AppointmentStatus.Claimed){\n                    setupRecordPaymentSubTask();\n                }\n            };\n        }\n\n        @Override\n        public View.OnLongClickListener getOnLongClickListener() {\n            return v -> {\n                setupAppointmentClaimSubTask();\n                return true;\n            };\n        }\n\n        @Override\n        public int getX() {\n            return hitbox.left;\n        }\n\n        @Override\n        public int getY() {\n            return hitbox.top;\n        }\n\n        @Override\n        public int getWidth() {\n            return hitbox.right - hitbox.left;\n        }\n\n        @Override\n        public int getHeight() {\n            return hitbox.bottom - hitbox.top;\n        }\n\n        private void setupAppointmentClaimSubTask(){\n            final Displayable display = this;\n\n            AppointmentClaimTask subTask  = new AppointmentClaimTask(host, t, status -> {\n                setupDaySelectionForm();\n                if(status == AppointmentClaimTask.DELETED){\n                    host.getBoard().remove(display);\n                    loadAppointment();\n                } else {\n                    host.getBoard().invalidateData(display);\n                }\n            });\n\n            subTask.start();\n        }\n\n        private void setupRecordPaymentSubTask(){\n            final Displayable display = this;\n\n            UpdateAppointmentTask subTask  = new UpdateAppointmentTask(host, t, data -> {\n                setupDaySelectionForm();\n                loadAppointment();\n            });\n\n            subTask.start();\n        }\n    }\n\n\n    private class HourMarker extends Displayable {\n\n        private final Rect hitbox;\n        private final int hour;\n        private final LocalDate date;\n        private final int colour;\n\n        public HourMarker(int hour, LocalDate date){\n            this.hour = hour;\n            this.date = date;\n            int time = hour * 60;\n            hitbox = new Rect(getTimeXpos(time), getRowYpos(0),\n                    getTimeXpos(time + 60),\n                    getRowYpos(0) + SLOT_HEIGHT);\n\n            if(date.getDayOfWeek().getValue() == 2 ||\n                    hour < 10 || hour >= 19 ||\n                    (hour >= 17 && (date.getDayOfWeek().getValue() % 7) < 2)){\n\n                if(hour % 2 != 0){\n                    colour = 0xFFB12C2C;\n                } else {\n                    colour = 0xFFFF7F7F;\n                }\n\n            } else if(hour % 2 == 0){\n                colour = Color.LTGRAY;\n            } else {\n                colour = 0xFFBBBBBB;\n            }\n        }\n\n        @Nullable\n        @Override\n        public Drawable getBGDrawable(Rect boundingBox) {\n            ShapeDrawable drawable =  new ShapeDrawable(new RectShape());\n            drawable.getPaint().setColor(colour);\n            drawable.setBounds(boundingBox);\n            return drawable;\n        }\n\n        @Override\n        public Colour getBGColour() {\n            return new Colour(colour);\n        }\n\n        @Override\n        public String getDisplayData() {\n            if(hour == 0){\n                return \"12 am\";\n            }\n\n            if(hour == 12){\n                return \"12 pm\";\n            }\n\n            return (hour < 12)? hour + \" am\" : (hour - 12) + \" pm\";\n        }\n\n        @Override\n        public View.OnClickListener getOnclickListener() {\n            return v -> {\n\n                final String date = selectedDate.replaceAll(\"/\", \" \");\n                LocalDate sel = TimeParser.parseDate(date);\n\n                if((sel != null && sel.compareTo(LocalDate.now()) >= 0) ||\n                        DataStorageModule.getFrontEnd().getSecurityModule().getLoggedinTech().getRole().equalsIgnoreCase(\"admin\")){\n\n                    NewAppointmentTask subTask = new NewAppointmentTask(host, hour, date, data -> {\n                        host.setBarText(host.getMainTaskTitle());\n                        setupDaySelectionForm();\n\n                        appointmentList.put(data.getID(), data);\n                        displayTransactions(date);\n                    });\n\n                    subTask.start();\n                }\n            };\n        }\n\n        @Override\n        public View.OnLongClickListener getOnLongClickListener() {\n            return null;\n        }\n\n        @Override\n        public int getX() {\n            return hitbox.left;\n        }\n\n        @Override\n        public int getY() {\n            return hitbox.top;\n        }\n\n        @Override\n        public int getWidth() {\n            return hitbox.right - hitbox.left;\n        }\n\n        @Override\n        public int getHeight() {\n            return hitbox.bottom - hitbox.top;\n        }\n    }\n\n\n    public static TaskSelectionButtion getMenuButton(Context context, final TaskHostestActivity host){\n        return new TaskSelectionButtion(context) {\n            @Override\n            public Task getTask() {\n                return new AppointmentViewerTask(host);\n            }\n\n            @Override\n            public String getTaskName() {\n                return \"Appointment View\";\n            }\n        };\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/chrysanthemum/ui/dataView/task/AppointmentViewerTask.java b/app/src/main/java/com/chrysanthemum/ui/dataView/task/AppointmentViewerTask.java
--- a/app/src/main/java/com/chrysanthemum/ui/dataView/task/AppointmentViewerTask.java	(revision 11967c8037ced455ebd0b9a118f69dae32d235fb)
+++ b/app/src/main/java/com/chrysanthemum/ui/dataView/task/AppointmentViewerTask.java	(date 1680882023389)
@@ -274,7 +274,7 @@
             subTask.start();
         }
 
-        private void setupRecordPaymentSubTask(){
+        private void setupRecordPaymentSubTask(){findCustomerByID
             final Displayable display = this;
 
             UpdateAppointmentTask subTask  = new UpdateAppointmentTask(host, t, data -> {
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 11967c8037ced455ebd0b9a118f69dae32d235fb)
+++ b/.idea/vcs.xml	(date 1680872132982)
@@ -1,5 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GithubSharedProjectSettings">
+    <option name="branchProtectionPatterns">
+      <list>
+        <option value="master" />
+      </list>
+    </option>
+  </component>
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
